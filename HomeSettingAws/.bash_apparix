#BASH-style functions
#---

function toot () {
   if test "$3"; then
     vim "$(apparix -favour rOl "$1" "$2")/$3"
   elif test "$2"; then
     vim "$(apparix -favour rOl "$1")/$2"
   else
      echo "toot tag dir file OR toot tag file"
   fi
}

function todo () {
   toot $@ TODO
}

function clog () {
   toot $@ ChangeLog
}

function note () {
   toot $@ NOTES
}

function als () {
  if test "$2"; then
    loc=$(apparix -favour rOl "$1" "$2")
  elif test "$1"; then
    loc=$(apparix --try-current-first -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
    ls "$loc"
  fi
}


function ae () {
  if test "$2"; then
    loc=$(apparix -favour rOl "$1" "$2")
  elif test "$1"; then
    loc=$(apparix --try-current-first -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
    files=$(ls $loc)
    if [[ $? == 0 ]]; then
       vi $files
    else
      echo "no listing for $loc"
    fi
  fi
}

function to () {
   if test "$2"; then
     cd "$(apparix "$1" "$2" || echo .)";
   else
     cd "$(apparix "$1" || echo .)";
   fi
   pwd
}

# function to () {
#   true
#   if test "$2"; then
#     loc=$(apparix --try-current-first -favour rOl "$1" "$2")
#   elif test "$1"; then
#     if test "$1" == '-'; then
#       loc="-"
#     else
#       loc=$(apparix --try-current-first -favour rOl "$1")
#     fi
#   else
#     loc=$HOME
#   fi
#   if [[ $? == 0 ]]; then
#     cd "$loc"
#   fi
# }

function bm () {
  if test "$2"; then
    apparix --add-mark "$1" "$2";
  elif test "$1"; then
    apparix --add-mark "$1";
  else
    apparix --add-mark;
  fi
}
function portal () {
  if test "$1"; then
    apparix --add-portal "$1";
  else
    apparix --add-portal;
  fi
}
# function to generate list of completions from .apparixrc
function _apparix_aliases ()
{ cur=$2
  dir=$3
  COMPREPLY=()
  nullglobsa=$(shopt -p nullglob)
  shopt -s nullglob
  if let $(($COMP_CWORD == 1)); then
    # now cur=<apparix mark> (completing on this) and dir='to'
    # Below will not complete on subdirectories. swap if so desired.
    # COMPREPLY=( $( cat $HOME/.apparix{rc,expand} | grep "j,.*$cur.*," | cut -f2 -d, ) )
    COMPREPLY=( $( (cat $HOME/.apparix{rc,expand} | grep "\<j," | cut -f2 -d, ; ls -1p | grep '/$' | tr -d /) | grep "\<$cur.*" ) )
  else
    # now dir=<apparix mark> and cur=<subdirectory-of-mark> (completing on this)
    dir=`apparix --try-current-first -favour rOl $dir 2>/dev/null` || return 0
    eval_compreply="COMPREPLY=( $(
      cd "$dir"
      \ls -d $cur* | while read r
      do
        [[ $1 == 'ae' || -d "$r" ]] &&
        [[ $r == *$cur* ]] &&
          echo \"${r// /\\ }\"
      done
    ) )"
  eval $eval_compreply
  fi
  $nullglobsa
  return 0
}



alias via='vi $HOME/.apparixrc'

# does not work under zsh
# # command to register the above to expand when the 'to' command's args are
# # being expanded
# complete -o nospace -F _apparix_aliases to
# complete -o nospace -F _apparix_aliases als
# complete -o nospace -F _apparix_aliases ae

export APPARIXLOG=$HOME/.apparixlog


